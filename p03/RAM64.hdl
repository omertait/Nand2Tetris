// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=loadRamA, b=loadRamB, c=loadRamC, d=loadRamD, e=loadRamE, f=loadRamF, g=loadRamG, h=loadRamH);
    RAM8(in=in, load=loadRamA, address=address[0..2], out=outRamA);
    RAM8(in=in, load=loadRamB, address=address[0..2], out=outRamB);
    RAM8(in=in, load=loadRamC, address=address[0..2], out=outRamC);
    RAM8(in=in, load=loadRamD, address=address[0..2], out=outRamD);
    RAM8(in=in, load=loadRamE, address=address[0..2], out=outRamE);
    RAM8(in=in, load=loadRamF, address=address[0..2], out=outRamF);
    RAM8(in=in, load=loadRamG, address=address[0..2], out=outRamG);
    RAM8(in=in, load=loadRamH, address=address[0..2], out=outRamH);
    Mux8Way16(a=outRamA, b=outRamB, c=outRamC, d=outRamD, e=outRamE, f=outRamF, g=outRamG, h=outRamH, sel=address[3..5], out=out);
}